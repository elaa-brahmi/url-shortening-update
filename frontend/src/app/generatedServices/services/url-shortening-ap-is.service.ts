/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { accessedUrl } from '../fn/url-shortening-ap-is/accessed-url';
import { AccessedUrl$Params } from '../fn/url-shortening-ap-is/accessed-url';
import { copyUrl } from '../fn/url-shortening-ap-is/copy-url';
import { CopyUrl$Params } from '../fn/url-shortening-ap-is/copy-url';
import { createCustomUrl } from '../fn/url-shortening-ap-is/create-custom-url';
import { CreateCustomUrl$Params } from '../fn/url-shortening-ap-is/create-custom-url';
import { createUrl } from '../fn/url-shortening-ap-is/create-url';
import { CreateUrl$Params } from '../fn/url-shortening-ap-is/create-url';
import { deleteUrl } from '../fn/url-shortening-ap-is/delete-url';
import { DeleteUrl$Params } from '../fn/url-shortening-ap-is/delete-url';
import { getAllUrls } from '../fn/url-shortening-ap-is/get-all-urls';
import { GetAllUrls$Params } from '../fn/url-shortening-ap-is/get-all-urls';
import { getOriginalUrl } from '../fn/url-shortening-ap-is/get-original-url';
import { GetOriginalUrl$Params } from '../fn/url-shortening-ap-is/get-original-url';
import { updateUrl } from '../fn/url-shortening-ap-is/update-url';
import { UpdateUrl$Params } from '../fn/url-shortening-ap-is/update-url';
import { UrlShortened } from '../models/url-shortened';


/**
 * APIs for shortening, managing, and resolving URLs. Includes endpoints for creating short URLs, retrieving original URLs, and analyzing URL usage statistics.
 */
@Injectable({ providedIn: 'root' })
export class UrlShorteningApIsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updateUrl()` */
  static readonly UpdateUrlPath = '/shorten/update/{id}';

  /**
   * update an url by it's id.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateUrl()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateUrl$Response(params: UpdateUrl$Params, context?: HttpContext): Observable<StrictHttpResponse<UrlShortened>> {
    return updateUrl(this.http, this.rootUrl, params, context);
  }

  /**
   * update an url by it's id.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateUrl$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateUrl(params: UpdateUrl$Params, context?: HttpContext): Observable<UrlShortened> {
    return this.updateUrl$Response(params, context).pipe(
      map((r: StrictHttpResponse<UrlShortened>): UrlShortened => r.body)
    );
  }

  /** Path part for operation `createCustomUrl()` */
  static readonly CreateCustomUrlPath = '/shorten/customUrl';

  /**
   * create a custom short url.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createCustomUrl()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createCustomUrl$Response(params: CreateCustomUrl$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return createCustomUrl(this.http, this.rootUrl, params, context);
  }

  /**
   * create a custom short url.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createCustomUrl$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createCustomUrl(params: CreateCustomUrl$Params, context?: HttpContext): Observable<void> {
    return this.createCustomUrl$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `createUrl()` */
  static readonly CreateUrlPath = '/shorten/create';

  /**
   * create a new url.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createUrl()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createUrl$Response(params: CreateUrl$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return createUrl(this.http, this.rootUrl, params, context);
  }

  /**
   * create a new url.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createUrl$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createUrl(params: CreateUrl$Params, context?: HttpContext): Observable<void> {
    return this.createUrl$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `copyUrl()` */
  static readonly CopyUrlPath = '/shorten/copy/{id}';

  /**
   * copy url to clipboard.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `copyUrl()` instead.
   *
   * This method doesn't expect any request body.
   */
  copyUrl$Response(params: CopyUrl$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return copyUrl(this.http, this.rootUrl, params, context);
  }

  /**
   * copy url to clipboard.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `copyUrl$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  copyUrl(params: CopyUrl$Params, context?: HttpContext): Observable<void> {
    return this.copyUrl$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `getAllUrls()` */
  static readonly GetAllUrlsPath = '/shorten/';

  /**
   * get all urls.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllUrls()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllUrls$Response(params?: GetAllUrls$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<UrlShortened>>> {
    return getAllUrls(this.http, this.rootUrl, params, context);
  }

  /**
   * get all urls.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllUrls$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllUrls(params?: GetAllUrls$Params, context?: HttpContext): Observable<Array<UrlShortened>> {
    return this.getAllUrls$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<UrlShortened>>): Array<UrlShortened> => r.body)
    );
  }

  /** Path part for operation `getOriginalUrl()` */
  static readonly GetOriginalUrlPath = '/shorten/GetOriginal';

  /**
   * get an original url.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getOriginalUrl()` instead.
   *
   * This method doesn't expect any request body.
   */
  getOriginalUrl$Response(params: GetOriginalUrl$Params, context?: HttpContext): Observable<StrictHttpResponse<UrlShortened>> {
    return getOriginalUrl(this.http, this.rootUrl, params, context);
  }

  /**
   * get an original url.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getOriginalUrl$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getOriginalUrl(params: GetOriginalUrl$Params, context?: HttpContext): Observable<UrlShortened> {
    return this.getOriginalUrl$Response(params, context).pipe(
      map((r: StrictHttpResponse<UrlShortened>): UrlShortened => r.body)
    );
  }

  /** Path part for operation `accessedUrl()` */
  static readonly AccessedUrlPath = '/shorten/Accessed/{id}';

  /**
   * get number of accessed url.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `accessedUrl()` instead.
   *
   * This method doesn't expect any request body.
   */
  accessedUrl$Response(params: AccessedUrl$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return accessedUrl(this.http, this.rootUrl, params, context);
  }

  /**
   * get number of accessed url.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `accessedUrl$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  accessedUrl(params: AccessedUrl$Params, context?: HttpContext): Observable<number> {
    return this.accessedUrl$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `deleteUrl()` */
  static readonly DeleteUrlPath = '/shorten/delete/{id}';

  /**
   * delete an url by it's id.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteUrl()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteUrl$Response(params: DeleteUrl$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteUrl(this.http, this.rootUrl, params, context);
  }

  /**
   * delete an url by it's id.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteUrl$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteUrl(params: DeleteUrl$Params, context?: HttpContext): Observable<void> {
    return this.deleteUrl$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
