/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { deleteItemResourceUrlshortenedDelete } from '../fn/url-shortened-entity-controller/delete-item-resource-urlshortened-delete';
import { DeleteItemResourceUrlshortenedDelete$Params } from '../fn/url-shortened-entity-controller/delete-item-resource-urlshortened-delete';
import { EntityModelUrlShortened } from '../models/entity-model-url-shortened';
import { getCollectionResourceUrlshortenedGet$Json } from '../fn/url-shortened-entity-controller/get-collection-resource-urlshortened-get-json';
import { GetCollectionResourceUrlshortenedGet$Json$Params } from '../fn/url-shortened-entity-controller/get-collection-resource-urlshortened-get-json';
import { getCollectionResourceUrlshortenedGet$UriList } from '../fn/url-shortened-entity-controller/get-collection-resource-urlshortened-get-uri-list';
import { GetCollectionResourceUrlshortenedGet$UriList$Params } from '../fn/url-shortened-entity-controller/get-collection-resource-urlshortened-get-uri-list';
import { getItemResourceUrlshortenedGet } from '../fn/url-shortened-entity-controller/get-item-resource-urlshortened-get';
import { GetItemResourceUrlshortenedGet$Params } from '../fn/url-shortened-entity-controller/get-item-resource-urlshortened-get';
import { PagedModelEntityModelUrlShortened } from '../models/paged-model-entity-model-url-shortened';
import { patchItemResourceUrlshortenedPatch } from '../fn/url-shortened-entity-controller/patch-item-resource-urlshortened-patch';
import { PatchItemResourceUrlshortenedPatch$Params } from '../fn/url-shortened-entity-controller/patch-item-resource-urlshortened-patch';
import { postCollectionResourceUrlshortenedPost } from '../fn/url-shortened-entity-controller/post-collection-resource-urlshortened-post';
import { PostCollectionResourceUrlshortenedPost$Params } from '../fn/url-shortened-entity-controller/post-collection-resource-urlshortened-post';
import { putItemResourceUrlshortenedPut } from '../fn/url-shortened-entity-controller/put-item-resource-urlshortened-put';
import { PutItemResourceUrlshortenedPut$Params } from '../fn/url-shortened-entity-controller/put-item-resource-urlshortened-put';

@Injectable({ providedIn: 'root' })
export class UrlShortenedEntityControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getCollectionResourceUrlshortenedGet()` */
  static readonly GetCollectionResourceUrlshortenedGetPath = '/urlShorteneds';

  /**
   * get-urlshortened
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getCollectionResourceUrlshortenedGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCollectionResourceUrlshortenedGet$Json$Response(params?: GetCollectionResourceUrlshortenedGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<PagedModelEntityModelUrlShortened>> {
    return getCollectionResourceUrlshortenedGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * get-urlshortened
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getCollectionResourceUrlshortenedGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCollectionResourceUrlshortenedGet$Json(params?: GetCollectionResourceUrlshortenedGet$Json$Params, context?: HttpContext): Observable<PagedModelEntityModelUrlShortened> {
    return this.getCollectionResourceUrlshortenedGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<PagedModelEntityModelUrlShortened>): PagedModelEntityModelUrlShortened => r.body)
    );
  }

  /**
   * get-urlshortened
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getCollectionResourceUrlshortenedGet$UriList()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCollectionResourceUrlshortenedGet$UriList$Response(params?: GetCollectionResourceUrlshortenedGet$UriList$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return getCollectionResourceUrlshortenedGet$UriList(this.http, this.rootUrl, params, context);
  }

  /**
   * get-urlshortened
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getCollectionResourceUrlshortenedGet$UriList$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCollectionResourceUrlshortenedGet$UriList(params?: GetCollectionResourceUrlshortenedGet$UriList$Params, context?: HttpContext): Observable<string> {
    return this.getCollectionResourceUrlshortenedGet$UriList$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `postCollectionResourceUrlshortenedPost()` */
  static readonly PostCollectionResourceUrlshortenedPostPath = '/urlShorteneds';

  /**
   * create-urlshortened
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `postCollectionResourceUrlshortenedPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  postCollectionResourceUrlshortenedPost$Response(params: PostCollectionResourceUrlshortenedPost$Params, context?: HttpContext): Observable<StrictHttpResponse<EntityModelUrlShortened>> {
    return postCollectionResourceUrlshortenedPost(this.http, this.rootUrl, params, context);
  }

  /**
   * create-urlshortened
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `postCollectionResourceUrlshortenedPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  postCollectionResourceUrlshortenedPost(params: PostCollectionResourceUrlshortenedPost$Params, context?: HttpContext): Observable<EntityModelUrlShortened> {
    return this.postCollectionResourceUrlshortenedPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<EntityModelUrlShortened>): EntityModelUrlShortened => r.body)
    );
  }

  /** Path part for operation `getItemResourceUrlshortenedGet()` */
  static readonly GetItemResourceUrlshortenedGetPath = '/urlShorteneds/{id}';

  /**
   * get-urlshortened
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getItemResourceUrlshortenedGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  getItemResourceUrlshortenedGet$Response(params: GetItemResourceUrlshortenedGet$Params, context?: HttpContext): Observable<StrictHttpResponse<EntityModelUrlShortened>> {
    return getItemResourceUrlshortenedGet(this.http, this.rootUrl, params, context);
  }

  /**
   * get-urlshortened
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getItemResourceUrlshortenedGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getItemResourceUrlshortenedGet(params: GetItemResourceUrlshortenedGet$Params, context?: HttpContext): Observable<EntityModelUrlShortened> {
    return this.getItemResourceUrlshortenedGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<EntityModelUrlShortened>): EntityModelUrlShortened => r.body)
    );
  }

  /** Path part for operation `putItemResourceUrlshortenedPut()` */
  static readonly PutItemResourceUrlshortenedPutPath = '/urlShorteneds/{id}';

  /**
   * update-urlshortened
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `putItemResourceUrlshortenedPut()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  putItemResourceUrlshortenedPut$Response(params: PutItemResourceUrlshortenedPut$Params, context?: HttpContext): Observable<StrictHttpResponse<EntityModelUrlShortened>> {
    return putItemResourceUrlshortenedPut(this.http, this.rootUrl, params, context);
  }

  /**
   * update-urlshortened
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `putItemResourceUrlshortenedPut$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  putItemResourceUrlshortenedPut(params: PutItemResourceUrlshortenedPut$Params, context?: HttpContext): Observable<EntityModelUrlShortened> {
    return this.putItemResourceUrlshortenedPut$Response(params, context).pipe(
      map((r: StrictHttpResponse<EntityModelUrlShortened>): EntityModelUrlShortened => r.body)
    );
  }

  /** Path part for operation `deleteItemResourceUrlshortenedDelete()` */
  static readonly DeleteItemResourceUrlshortenedDeletePath = '/urlShorteneds/{id}';

  /**
   * delete-urlshortened
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteItemResourceUrlshortenedDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteItemResourceUrlshortenedDelete$Response(params: DeleteItemResourceUrlshortenedDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteItemResourceUrlshortenedDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * delete-urlshortened
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteItemResourceUrlshortenedDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteItemResourceUrlshortenedDelete(params: DeleteItemResourceUrlshortenedDelete$Params, context?: HttpContext): Observable<void> {
    return this.deleteItemResourceUrlshortenedDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `patchItemResourceUrlshortenedPatch()` */
  static readonly PatchItemResourceUrlshortenedPatchPath = '/urlShorteneds/{id}';

  /**
   * patch-urlshortened
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `patchItemResourceUrlshortenedPatch()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  patchItemResourceUrlshortenedPatch$Response(params: PatchItemResourceUrlshortenedPatch$Params, context?: HttpContext): Observable<StrictHttpResponse<EntityModelUrlShortened>> {
    return patchItemResourceUrlshortenedPatch(this.http, this.rootUrl, params, context);
  }

  /**
   * patch-urlshortened
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `patchItemResourceUrlshortenedPatch$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  patchItemResourceUrlshortenedPatch(params: PatchItemResourceUrlshortenedPatch$Params, context?: HttpContext): Observable<EntityModelUrlShortened> {
    return this.patchItemResourceUrlshortenedPatch$Response(params, context).pipe(
      map((r: StrictHttpResponse<EntityModelUrlShortened>): EntityModelUrlShortened => r.body)
    );
  }

}
