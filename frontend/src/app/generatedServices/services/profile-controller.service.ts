/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { descriptor$Any } from '../fn/profile-controller/descriptor-any';
import { Descriptor$Any$Params } from '../fn/profile-controller/descriptor-any';
import { descriptor$Json } from '../fn/profile-controller/descriptor-json';
import { Descriptor$Json$Params } from '../fn/profile-controller/descriptor-json';
import { JsonSchema } from '../models/json-schema';
import { listAllFormsOfMetadata } from '../fn/profile-controller/list-all-forms-of-metadata';
import { ListAllFormsOfMetadata$Params } from '../fn/profile-controller/list-all-forms-of-metadata';
import { RepresentationModelObject } from '../models/representation-model-object';

@Injectable({ providedIn: 'root' })
export class ProfileControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `listAllFormsOfMetadata()` */
  static readonly ListAllFormsOfMetadataPath = '/profile';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `listAllFormsOfMetadata()` instead.
   *
   * This method doesn't expect any request body.
   */
  listAllFormsOfMetadata$Response(params?: ListAllFormsOfMetadata$Params, context?: HttpContext): Observable<StrictHttpResponse<RepresentationModelObject>> {
    return listAllFormsOfMetadata(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `listAllFormsOfMetadata$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  listAllFormsOfMetadata(params?: ListAllFormsOfMetadata$Params, context?: HttpContext): Observable<RepresentationModelObject> {
    return this.listAllFormsOfMetadata$Response(params, context).pipe(
      map((r: StrictHttpResponse<RepresentationModelObject>): RepresentationModelObject => r.body)
    );
  }

  /** Path part for operation `descriptor()` */
  static readonly DescriptorPath = '/profile/urlShorteneds';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `descriptor$Any()` instead.
   *
   * This method doesn't expect any request body.
   */
  descriptor$Any$Response(params?: Descriptor$Any$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return descriptor$Any(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `descriptor$Any$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  descriptor$Any(params?: Descriptor$Any$Params, context?: HttpContext): Observable<string> {
    return this.descriptor$Any$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `descriptor$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  descriptor$Json$Response(params?: Descriptor$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<JsonSchema>> {
    return descriptor$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `descriptor$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  descriptor$Json(params?: Descriptor$Json$Params, context?: HttpContext): Observable<JsonSchema> {
    return this.descriptor$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<JsonSchema>): JsonSchema => r.body)
    );
  }

}
